"""
Django settings for flashlight project.

Generated by 'django-admin startproject' using Django 5.0.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import os
import sys
import json
from pathlib import Path
import logging.config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: CHANGE THIS: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-k-toxoupyh36e)d@+p)$a(b)!34@$@l15!p@o6z_+s$lax!zwe'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = False
ALLOWED_HOSTS = [
    '127.0.0.1',
    'localhost',
]

INTERNAL_IPS = [
    "127.0.0.1",
]

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django_extensions',
    # 'guardian',
    'whitenoise',
    'rest_framework',
    'django_bootstrap5',
    'django_q',
    'users',
    'events',
]


MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

# if DEBUG:
#     INSTALLED_APPS.append('debug_toolbar')
#     MIDDLEWARE.append("debug_toolbar.middleware.DebugToolbarMiddleware")

ROOT_URLCONF = 'flashlight.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [ BASE_DIR / 'templates' ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'events.context_processors.settings_context',
                'django.template.context_processors.media',
            ],
        },
    },
]

WSGI_APPLICATION = 'flashlight.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
        'OPTIONS': {
            "timeout": 120,
            "init_command": "PRAGMA journal_mode=WAL;",
            "transaction_mode": "IMMEDIATE", 
        },
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'
STATIC_ROOT = BASE_DIR / "staticfiles"
STATICFILES_DIRS = [
    BASE_DIR / "static",
]

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGGING_CONFIG = None

# LOG_LEVEL = "DEBUG"
LOG_LEVEL = "INFO"
logging.config.dictConfig(
    {
        "version": 1,
        "disable_existing_loggers": True,
        "formatters": {
            "verbose": {
                "class": "pythonjsonlogger.jsonlogger.JsonFormatter",
                "format": '%(levelname)s %(name)s %(asctime)s %(module)s %(lineno)s %(process)d %(thread)d %(message)s',
            },
            "simple": {
                "class": "pythonjsonlogger.jsonlogger.JsonFormatter",
                "format": "%(levelname)s %(message)s",
            },
        },
        "handlers": {
            "file": {
                "level": LOG_LEVEL,
                "class": "logging.handlers.RotatingFileHandler",
                "filename": BASE_DIR / "log" / f"{os.getpid()}-{sys.argv[1]}.log",
                "mode": "a",
                "maxBytes": 5242880,
                "backupCount": 10,
                "formatter": "verbose",
                # "delay": True,
            },
            "console": {
                "class": "logging.StreamHandler",
                "level": LOG_LEVEL,
                "formatter": "simple",
            },
        },
        "loggers": {
            "flashlight": {
                "handlers": ["file"],
                "level": LOG_LEVEL,
            },
            "django": {
                "handlers": ["file"],
                "level": LOG_LEVEL,
            },
            "django.template": {
                "handlers": [],
                "level": LOG_LEVEL,
                "propagate": False,
            },
            "events": {
                "handlers": ["file"],
                "level": LOG_LEVEL,
            },
            "django.utils.autoreload": {
                "propagate": False,
                "handlers": [],
                "level": LOG_LEVEL,
            }
        },
    }
)


AUTH_USER_MODEL = "users.User"
AUTHENTICATION_BACKENDS = (
    'django.contrib.auth.backends.ModelBackend', # this is default
    # 'guardian.backends.ObjectPermissionBackend',
)
# This PAGE_SIZE really only helps the DRF browsable API.
# Submitting a Query does not respect this and will return
# the results as per your query.
REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 100,
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
        'events.permissions.IsOwner',
    ],
}

MEDIA_ROOT = BASE_DIR / "uploads/"
MEDIA_URL = "uploads/"

FLASHLIGHT_AUTORELOAD = False
FLASHLIGHT_SERVER_HOST = '127.0.0.1'
FLASHLIGHT_SERVER_PORT = 8000
FLASHLIGHT_SERVER_LOG_STDOUT = True
FLASHLIGHT_MAX_REQUEST_BODY_SIZE = 104857600
FLASHLIGHT_MAX_REQUEST_HEADER_SIZE = 512000
FLASHLIGHT_SSL_PRIVATE_KEY = None
FLASHLIGHT_SSL_CERTIFICATE = None
FLASHLIGHT_SSL_MODULE = 'builtin'
FLASHLIGHT_SOCKET_TIMEOUT = 10
FLASHLIGHT_SOCKET_QUEUE_SIZE = 5
FLASHLIGHT_ACCEPTED_QUEUE_TIMEOUT = 10
FLASHLIGHT_SERVER_MAX_THREADS = 20



FLASHLIGHT_ENABLE_EXTRACTIONS_ON_CREATE = True
FLASHLIGHT_ENABLE_PROCESSORSS_ON_CREATE = True
FLASHLIGHT_ENABLE_EXTRACTIONS_ON_UPDATE = True
FLASHLIGHT_ENABLE_PROCESSORSS_ON_UPDATE = True
FLASHLIGHT_STRICT_VALIDATION = False  # Experimental

FLASHLIGHT_DOCUMENTATION_DIRECTORY = BASE_DIR.joinpath('doc')

FLASHLIGHT_EXTRACTION_MAP = {
    'json': json.loads,
    'apache': 'events.parsers.apache',
    'csv': 'events.parsers.csv',
    'xml': 'xmltodict.parse',
}

FLASHLIGHT_PROCESSOR_MAP = {}

FLASHLIGHT_NAV_MENU = {
    "Flashlight": {
        "explore": "explore",
    },
}

FLASHLIGHT_SEARCH_COMMANDS = {
    # Generic search/transform operations
    'autocast': 'events.search_commands.autocast',
    'chart': 'events.search_commands.chart',
    'dedup': 'events.search_commands.dedup',
    'distinct': 'events.search_commands.distinct',
    'drop_fields': 'events.search_commands.drop_fields',
    'echo': 'events.search_commands.echo',
    'ensure_list': 'events.search_commands.ensure_list',
    'eval': 'events.search_commands.eval',
    'event_split': 'events.search_commands.event_split',
    'events_to_context': 'events.search_commands.events_to_context',
    'explode': 'events.search_commands.explode',
    'explode_timestamp': 'events.search_commands.explode_timestamp',
    'fake_data': 'events.search_commands.fake_data',
    'filter': 'events.search_commands.filter',
    'head': 'events.search_commands.head',
    'join': 'events.search_commands.join',
    'make_events': 'events.search_commands.make_events',
    'mark_timestamp': 'events.search_commands.mark_timestamp',
    'merge': 'events.search_commands.merge',
    'orm': 'events.search_commands.orm',
    'read_file': 'events.search_commands.read_file',
    'rename': 'events.search_commands.rename',
    'replace': 'events.search_commands.replace',
    'request': 'events.search_commands.request',
    'resolve': 'events.search_commands.resolve',
    'rex': 'events.search_commands.rex',
    'run_query': 'events.search_commands.run_query',
    'search': 'events.search_commands.search',
    'select': 'events.search_commands.select',
    'set': 'events.search_commands.set',
    'sort': 'events.search_commands.sort',
    'sql_query': 'events.search_commands.sql_query',
    'stats': 'events.search_commands.stats',
    'table': 'events.search_commands.table',
    'transpose': 'events.search_commands.transpose',
    'value_list': 'events.search_commands.value_list',
    'qs_aggregate': 'events.search_commands.qs.aggregate',
    'qs_alias': 'events.search_commands.qs.alias',
    'qs_annotate': 'events.search_commands.qs.annotate',
    'qs_count': 'events.search_commands.qs.count',
    'qs_dates': 'events.search_commands.qs.dates',
    'qs_datetimes': 'events.search_commands.qs.datetimes',
    'qs_defer': 'events.search_commands.qs.defer',
    'qs_delete': 'events.search_commands.qs.delete',
    'qs_distinct': 'events.search_commands.qs.distinct',
    'qs_earliest': 'events.search_commands.qs.earliest',
    'qs_exclude': 'events.search_commands.qs.exclude',
    'qs_exists': 'events.search_commands.qs.exists',
    'qs_explain': 'events.search_commands.qs.explain',
    'qs_filter': 'events.search_commands.qs.filter',
    'qs_first': 'events.search_commands.qs.first',
    'qs_last': 'events.search_commands.qs.last',
    'qs_only': 'events.search_commands.qs.only',
    'qs_order_by': 'events.search_commands.qs.order_by',
    'qs_reverse': 'events.search_commands.qs.reverse',
    'qs_select_related': 'events.search_commands.qs.select_related',
    'qs_update': 'events.search_commands.qs.update',
    'qs_using': 'events.search_commands.qs.using',
    'qs_values': 'events.search_commands.qs.values',
}


Q_CLUSTER = {
    'name': 'DjangORM',
    'catch_up': False,
    'workers': 2,
    'timeout': 90,
    'retry': 120,
    'queue_limit': 50,
    'bulk': 10,
    'poll': 1,
    'orm': 'default'
}

python = BASE_DIR / 'python' / '3.13.1' / 'python.exe'
syslog_script = BASE_DIR / 'utilities' / 'cli' / 'syslog-receiver.py'
# syslog_command = f'{python} {syslog_script} --server http://127.0.0.1:8000 --index datapower_logs --tcp-cert C:/Users/cliff/projects/mast3/build/assemble/etc/crypto/cert/mast.crt --tcp-key C:/Users/cliff/projects/mast3/build/assemble/etc/crypto/private/mast.key -u FLASHLIGHT_USER -p FLASHLIGHT_PASSWORD --line-ending linux --tcp --tcp-port 1514 --hostname 192.168.0.190 -vvvvvv'

FLASHLIGHT_SERVICE_COMMANDS = [
    str(BASE_DIR / 'fl.bat') + ' serve',
    str(BASE_DIR / 'fl.bat') + ' qcluster',
    # syslog_command,
]
FLASHLIGHT_SERVICE_INTERVAL = 5
